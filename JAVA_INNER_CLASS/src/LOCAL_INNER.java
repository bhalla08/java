public class LOCAL_INNER {
    private int data=30;//instance variable
    void display(){
        class Local{
            void msg(){System.out.println(data);}
        }
        Local l=new Local();
        l.msg();
    }
    public static void main(String args[]){
        LOCAL_INNER obj=new LOCAL_INNER();
        obj.display();
    }
}
/*
Internal class generated by the compiler
In such case, compiler creates a class named Simple$1Local that have the reference of the outer class.


import java.io.PrintStream;
class localInner1$Local
{
    final localInner1 this$0;
    localInner1$Local()
    {
        super();
        this$0 = Simple.this;
    }
    void msg()
    {
        System.out.println(localInner1.access$000(localInner1.this));
    }
}
 */


/*
Rule: Local variable can't be private, public or protected.

1) Local inner class cannot be invoked from outside the method.
2) Local inner class cannot access non-final local variable till JDK 1.7. Since JDK 1.8, it is possible to access the
non-final local variable in local inner class.
 */